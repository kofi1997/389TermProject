/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cse389_termserver;

/**
 *
 * @author Emily
 */
import java.io.*;
import java.net.*;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.concurrent.*;
import java.util.logging.*;
import java.util.Scanner;

public class CSE389_termServer {

   private static final Logger logger = Logger.getLogger(
   CSE389_termServer.class.getCanonicalName());
  private static final int NUM_THREADS = 50;
  private static final String INDEX_FILE = "index.html";

  private final File rootDirectory;
  private final int port;
    
  public CSE389_termServer(File rootDirectory, int port) throws IOException {
    
    if (!rootDirectory.isDirectory()) {
      throw new IOException(rootDirectory 
          + " does not exist as a directory"); 
    }
    this.rootDirectory = rootDirectory;
    this.port = port;
  }
  
  public void userAuthentication(File wordsfile, ArrayList<Authentication> users) throws FileNotFoundException{
      Scanner file=new Scanner(wordsfile);
      Scanner input=new Scanner(System.in);
      String userName=""; String password=""; String p=""; String u="";
      boolean linNum=true;
      boolean condition=false;
              while(!condition){
            System.out.print("Enter your User Name: ");
            userName=input.nextLine();
            System.out.print("\nEnter your Password: ");
            password=input.nextLine();        

            while (file.hasNextLine()){
                String line=file.nextLine();
                if(linNum){
                    u=line;
                    linNum=false;
                }
                else{
                    p=line;
                    Authentication user=new Authentication(u,p);
                    users.add(user);
                    linNum=true;
                } 
            }
            for(int x=0;x<users.size();x++){
                if (userName.equals(users.get(x).user)){

                    if(password.equals(users.get(x).password)){ condition=true; break;}
                    else {System.out.println("That was an incorrect Password."); break;}
                }
                if(x==users.size()-1 && !userName.equals(users.get(x).user)){
                    System.out.println("That was an incorrect Username.");
                    break;
                }
            }
        }
  }
  
  public void authenticate() throws IOException {
      String userName=""; String password="";
      File wordsfile=new File("Authentication.txt");
      if(!wordsfile.exists()) wordsfile.createNewFile();
              
      Scanner file=new Scanner(wordsfile);
      Scanner input=new Scanner(System.in);
      
      ArrayList<Authentication> users=new ArrayList();
      Authentication admin= new Authentication();
      users.add(admin);
      System.out.print("Do you have a username? (enter 1 or 2) \n1. yes\n2. no\n");
      int ans=input.nextInt();
      if(ans==1){
          userAuthentication(wordsfile, users);
      }
      else if (ans==2){
          FileWriter fw=new FileWriter(wordsfile, true);
          BufferedWriter bw=new BufferedWriter(fw);
          System.out.println("Create your User Name: ");
            String spaceCatch=input.nextLine();
            userName=input.nextLine();
            System.out.println("\nCreate your Password: ");
            password=input.nextLine();
            if(file.hasNextLine())bw.newLine();
            bw.write(userName);
            bw.newLine();
            bw.write(password);
            bw.close();
            userAuthentication(wordsfile, users);
      }
      else return;
  }

  public void start() throws IOException {      
    ExecutorService pool = Executors.newFixedThreadPool(NUM_THREADS);
    try (ServerSocket server = new ServerSocket(port)) {
      logger.info("Accepting connections on port " + server.getLocalPort());
      logger.info("Document Root: " + rootDirectory);
      
      while (true) {
        try {
          Socket request = server.accept();
          Runnable r = new RequestProcessor(
              rootDirectory, INDEX_FILE, request);
          pool.submit(r);
        } catch (IOException ex) {
          logger.log(Level.WARNING, "Error accepting connection", ex);
        }   
      }
    }
  }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
         File docroot;
    try {
      docroot = new File(args[0]);
    } catch (ArrayIndexOutOfBoundsException ex) {
      System.out.println("Usage: java JHTTP docroot port");
      return;
    }
    
    // set the port to listen on
    int port;
    try {
      port = Integer.parseInt(args[1]);
      if (port < 0 || port > 65535) port = 80;
    } catch (RuntimeException ex) {
      port = 80;
    }  
    
    try {            
      CSE389_termServer webserver = new CSE389_termServer(docroot, port);
      webserver.authenticate();
      webserver.start();
    } catch (IOException ex) {
      logger.log(Level.SEVERE, "Server could not start", ex);
    }
    }
    
}
